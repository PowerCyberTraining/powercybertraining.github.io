[
    {
        "question": "Which command is used to change your current working directory?",
        "type": "multiple_choice",
        "answers": [
            {
                "answer": "cd",
                "correct": true,
                "feedback": "Correct! The 'cd' command (change directory) is used to navigate between directories."
            },
            {
                "answer": "ls",
                "correct": false,
                "feedback": "The 'ls' command lists files and directories, but doesn't change your location."
            },
            {
                "answer": "pwd",
                "correct": false,
                "feedback": "The 'pwd' command (print working directory) displays your current location but doesn't change it."
            },
            {
                "answer": "mv",
                "correct": false,
                "feedback": "The 'mv' command moves files or directories, but doesn't change your current location."
            }
        ]
    },
    {
        "question": "What command would you use to create a new empty file called 'notes.txt'?",
        "type": "multiple_choice",
        "answers": [
            {
                "answer": "touch notes.txt",
                "correct": true,
                "feedback": "Correct! The 'touch' command creates an empty file."
            },
            {
                "answer": "create notes.txt",
                "correct": false,
                "feedback": "There is no 'create' command in standard Linux shells."
            },
            {
                "answer": "mkdir notes.txt",
                "correct": false,
                "feedback": "The 'mkdir' command creates directories, not files."
            },
            {
                "answer": "echo notes.txt",
                "correct": false,
                "feedback": "The 'echo' command outputs text, but doesn't create files by itself (without redirection)."
            }
        ]
    },
    {
        "question": "Which of the following would show all files in the current directory, including hidden files?",
        "type": "multiple_choice",
        "answers": [
            {
                "answer": "ls -a",
                "correct": true,
                "feedback": "Correct! The -a flag shows all files, including hidden files (those starting with a dot)."
            },
            {
                "answer": "ls -l",
                "correct": false,
                "feedback": "The -l flag shows detailed information in long format, but doesn't show hidden files."
            },
            {
                "answer": "ls -h",
                "correct": false,
                "feedback": "The -h flag is typically used for human-readable file sizes, not for showing hidden files."
            },
            {
                "answer": "ls --all-files",
                "correct": false,
                "feedback": "This is not a standard option for the ls command."
            }
        ]
    },
    {
        "question": "What command would you use to remove an empty directory called 'temp'?",
        "type": "multiple_choice",
        "answers": [
            {
                "answer": "rmdir temp",
                "correct": true,
                "feedback": "Correct! The 'rmdir' command removes empty directories."
            },
            {
                "answer": "rm temp",
                "correct": false,
                "feedback": "The basic 'rm' command is for deleting files, not directories (though 'rm -r' can remove directories)."
            },
            {
                "answer": "delete temp",
                "correct": false,
                "feedback": "There is no 'delete' command in standard Linux shells."
            },
            {
                "answer": "remove temp",
                "correct": false,
                "feedback": "There is no 'remove' command in standard Linux shells."
            }
        ]
    },
    {
        "question": "What does the '>' symbol do in a command like 'echo \"Hello\" > greeting.txt'?",
        "type": "multiple_choice",
        "answers": [
            {
                "answer": "Redirects output to a file, overwriting the file if it exists",
                "correct": true,
                "feedback": "Correct! This is output redirection that creates or overwrites the file."
            },
            {
                "answer": "Appends the output to the end of the file",
                "correct": false,
                "feedback": "That's what the '>>' operator does, not '>'."
            },
            {
                "answer": "Compares if the left side is greater than the right side",
                "correct": false,
                "feedback": "While '>' is a comparison operator in programming, in the shell it's used for redirection."
            },
            {
                "answer": "Takes input from the file",
                "correct": false,
                "feedback": "The '<' symbol is used for input redirection, not '>'."
            }
        ]
    },
    {
        "question": "Which command would you use to find all files with a '.log' extension in the current directory and subdirectories?",
        "type": "multiple_choice",
        "answers": [
            {
                "answer": "find . -name \"*.log\"",
                "correct": true,
                "feedback": "Correct! This command searches from the current directory (.) for files matching the pattern."
            },
            {
                "answer": "grep \"*.log\" .",
                "correct": false,
                "feedback": "The 'grep' command searches for patterns within files, not for the filenames themselves."
            },
            {
                "answer": "ls *.log",
                "correct": false,
                "feedback": "This would only list .log files in the current directory, not in subdirectories."
            },
            {
                "answer": "locate *.log",
                "correct": false,
                "feedback": "While 'locate' can find files, it searches a database that might not be up to date, and the syntax is not correct for limiting to the current directory."
            }
        ]
    },
    {
        "question": "If a file has the permissions 'rw-r--r--', what does this mean?",
        "type": "multiple_choice",
        "answers": [
            {
                "answer": "The owner can read and write, while group members and others can only read",
                "correct": true,
                "feedback": "Correct! 'rw-' for owner, 'r--' for group, and 'r--' for others."
            },
            {
                "answer": "Everyone can read and write the file",
                "correct": false,
                "feedback": "This would be represented as 'rw-rw-rw-'."
            },
            {
                "answer": "Only the owner can access the file",
                "correct": false,
                "feedback": "This would be represented as 'rw-------' or similar."
            },
            {
                "answer": "The file is executable by everyone",
                "correct": false,
                "feedback": "There are no execute (x) permissions set for anyone."
            }
        ]
    },
    {
        "question": "What command would you use to change a file's permissions to allow the owner to read, write, and execute, while group members and others can only read and execute?",
        "type": "multiple_choice",
        "answers": [
            {
                "answer": "chmod 755 filename",
                "correct": true,
                "feedback": "Correct! 7 (rwx) for owner and 5 (r-x) for group and others."
            },
            {
                "answer": "chmod 644 filename",
                "correct": false,
                "feedback": "This sets rw-r--r-- (read/write for owner, read-only for group and others)."
            },
            {
                "answer": "chmod 777 filename",
                "correct": false,
                "feedback": "This gives full permissions (rwx) to everyone, which is more permissive than required."
            },
            {
                "answer": "chmod +x filename",
                "correct": false,
                "feedback": "This adds execute permission to all who already have read permissions, but doesn't set the full permission pattern requested."
            }
        ]
    },
    {
        "question": "What does the pipe symbol (|) do in a command like 'ls -l | grep \"txt\"'?",
        "type": "multiple_choice",
        "answers": [
            {
                "answer": "Takes the output of the first command and sends it as input to the second command",
                "correct": true,
                "feedback": "Correct! The pipe connects commands by redirecting output from one to the input of another."
            },
            {
                "answer": "Runs both commands simultaneously",
                "correct": false,
                "feedback": "While both commands run, they don't run simultaneously - the first command completes and its output is passed to the second."
            },
            {
                "answer": "Performs a logical OR operation between the commands",
                "correct": false,
                "feedback": "In some languages, '|' represents OR, but in the shell it's a pipe for command chaining."
            },
            {
                "answer": "Saves the output of both commands to a file",
                "correct": false,
                "feedback": "The pipe doesn't save output to a file - that would require redirection with > or >>."
            }
        ]
    },
    {
        "question": "Which key combination is used to exit the nano text editor after making changes?",
        "type": "multiple_choice",
        "answers": [
            {
                "answer": "Ctrl + X",
                "correct": true,
                "feedback": "Correct! Ctrl+X exits nano, prompting you to save changes if needed."
            },
            {
                "answer": "Ctrl + C",
                "correct": false,
                "feedback": "Ctrl+C cancels current operations in many programs but isn't the correct way to exit nano."
            },
            {
                "answer": ":q!",
                "correct": false,
                "feedback": "This is a Vim command, not a nano command."
            },
            {
                "answer": "Esc",
                "correct": false,
                "feedback": "Esc has different functions in nano, but doesn't exit the editor."
            }
        ]
    }
]
